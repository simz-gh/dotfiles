EDITOR=micro
XDG_CACHE_HOME=$HOME/.cache
XDG_CONFIG_HOME=$HOME/.config
XDG_DATA_HOME=$HOME/.local/share
XDG_STATE_HOME=$HOME/.local/state

# Most of these functions have been taken from https://github.com/HyDE-Project/HyDE/blob/master/Configs/.zshenv
LESSHISTFILE=${LESSHISTFILE:-/tmp/less-hist}

# Install packages from both Arch and AUR
function in {
    local -a inPkg=("$@")
    local -a arch=()
    local -a aur=()

    for pkg in "${inPkg[@]}"; do
    if pacman -Si "${pkg}" &>/dev/null; then
    arch+=("${pkg}")
    else
    aur+=("${pkg}")
    fi
    done

    if [[ ${#arch[@]} -gt 0 ]]; then
    sudo pacman -S "${arch[@]}"
    fi

    if [[ ${#aur[@]} -gt 0 ]]; then
    ${aurhelper} -S "${aur[@]}"
    fi
}

# Function to display a slow load warning
function slow_load_warning {
    local lock_file="/tmp/.slow_load_warning.lock"
    local load_time=$SECONDS

    # Check if the lock file exists
    if [[ ! -f $lock_file ]]; then
        # Create the lock file
        touch $lock_file

        # Display the warning if load time exceeds the limit
        time_limit=3
        if ((load_time > time_limit)); then
            cat <<EOF
    ⚠️ Warning: Shell startup took more than ${time_limit} seconds. Consider optimizing your configuration.
        1. This might be due to slow plugins, slow initialization scripts.
        2. Duplicate plugins initialization.
            - Check the '.zshrc' file from the repo for a clean configuration.
        3. Check the '~/.hyde.zshrc' file for any slow initialization scripts.
EOF
        fi
    fi
}

# Function to handle initialization errors
function handle_init_error {
    if [[ $? -ne 0 ]]; then
        echo "Error during initialization. Please check your configuration."
    fi
}

# Function to remove the lock file on exit
function cleanup {
    rm -f /tmp/.slow_load_warning.lock
}

function no_such_file_or_directory_handler {
    local red='\e[1;31m' reset='\e[0m'
    printf "${red}zsh: no such file or directory: %s${reset}\n" "$1"
    return 127
}

# Detect AUR wrapper and cache it for faster subsequent loads
aur_cache_file="/tmp/.aurhelper.zshrc"
if [[ -f $aur_cache_file ]]; then
    aurhelper=$(<"$aur_cache_file")
else
    if pacman -Qi yay &>/dev/null; then
        aurhelper="yay"
    elif pacman -Qi paru &>/dev/null; then
        aurhelper="paru"
    fi
    echo "$aurhelper" > "$aur_cache_file"
fi
